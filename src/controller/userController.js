const User = require('../models/user.model');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const register = async (req, res) => {
    try {
        const { name, email, password, role } = req.body;

        console.log("üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await User.findOne({ where: { email } });
        if (existingUser) {
            return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!' });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);

        // T·∫°o ng∆∞·ªùi d√πng m·ªõi
        const newUser = await User.create({
            name,
            email,
            password: hashedPassword,
            role
        });

        res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng!', user: newUser });

    } catch (error) {
        console.error("‚ùå L·ªói khi ƒëƒÉng k√Ω:", error);
        res.status(500).json({ message: 'L·ªói ƒëƒÉng k√Ω!', error: error.message });
    }
};

const login = async (req, res) => {
    try {
        const { email, password } = req.body;

        // Ki·ªÉm tra t√†i kho·∫£n
        const user = await User.findOne({ where: { email } });
        if (!user) {
            return res.status(400).json({ message: 'Email kh√¥ng t·ªìn t·∫°i!' });
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!' });
        }

        // T·∫°o token JWT
        const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '1h' });

        res.status(200).json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', token, user });
    } catch (error) {
        console.error("‚ùå L·ªói khi ƒëƒÉng nh·∫≠p:", error);
        res.status(500).json({ message: 'L·ªói ƒëƒÉng nh·∫≠p!', error });
    }
};

const getAllUsers = async (req, res) => {
    try {
        const users = await User.findAll();
        res.status(200).json(users);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng!', error });
    }
};

const getUserById = async (req, res) => {
    try {
        const { id } = req.params;
        const user = await User.findByPk(id, { attributes: { exclude: ["password"] } });

        if (!user) {
            return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
        }

        res.status(200).json(user);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng!", error });
    }
};

const deleteUser = async (req, res) => {
    try {
        const { id } = req.params;

        // Ki·ªÉm tra xem user c√≥ t·ªìn t·∫°i kh√¥ng
        const user = await User.findByPk(id);
        if (!user) {
            return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
        }

        // X√≥a user
        await user.destroy();
        res.status(200).json({ message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!" });

    } catch (error) {
        res.status(500).json({ message: "L·ªói khi x√≥a ng∆∞·ªùi d√πng!", error });
    }
};



module.exports = {
    register, login, getAllUsers, getUserById, deleteUser
}