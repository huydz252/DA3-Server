const { Court, User } = require("../models"); // Th√™m User v√†o ƒë√¢y


const getAllCourts = async (req, res) => {
    try {
        const courts = await Court.findAll();
        res.status(200).json(courts);
    } catch (error) {
        res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch s√¢n!", error });
    }
};

const getCourtById = async (req, res) => {
    try {
        const { id } = req.params;
        const court = await Court.findByPk(id);

        if (!court) {
            return res.status(404).json({ message: "S√¢n kh√¥ng t·ªìn t·∫°i!" });
        }

        res.status(200).json(court);
    } catch (error) {
        res.status(500).json({ message: "L·ªói l·∫•y th√¥ng tin s√¢n!", error });
    }
};

const createCourt = async (req, res) => {
    try {
        const { owner_id, name, location, price_per_hour, description, status } = req.body;

        const newCourt = await Court.create({
            owner_id,
            name,
            location,
            price_per_hour,
            description,
            status
        });

        res.status(201).json({ message: "T·∫°o s√¢n th√†nh c√¥ng!", court: newCourt });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi t·∫°o s√¢n!", error });
    }
};

const updateCourt = async (req, res) => {
    try {
        const { id } = req.params; // L·∫•y id s√¢n t·ª´ URL
        const { owner_id, name, location, price_per_hour, description, status } = req.body; // D·ªØ li·ªáu c·∫≠p nh·∫≠t

        // Ki·ªÉm tra s√¢n c√≥ t·ªìn t·∫°i kh√¥ng
        const court = await Court.findByPk(id);
        if (!court) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s√¢n!" });
        }

        // N·∫øu c√≥ owner_id m·ªõi, ki·ªÉm tra xem user ƒë√≥ c√≥ t·ªìn t·∫°i kh√¥ng
        if (owner_id) {
            const owner = await User.findByPk(owner_id);
            if (!owner) {
                return res.status(400).json({ message: "Ch·ªß s√¢n kh√¥ng t·ªìn t·∫°i!" });
            }
        }

        // C·∫≠p nh·∫≠t th√¥ng tin s√¢n
        await court.update({
            owner_id: owner_id || court.owner_id,
            name: name || court.name,
            location: location || court.location,
            price_per_hour: price_per_hour || court.price_per_hour,
            description: description || court.description,
            status: status || court.status,

        });

        console.log("‚úÖ C·∫≠p nh·∫≠t s√¢n th√†nh c√¥ng!", court);
        res.json({ message: "C·∫≠p nh·∫≠t s√¢n th√†nh c√¥ng!", court });
    } catch (error) {
        console.error("üî• L·ªói khi c·∫≠p nh·∫≠t s√¢n:", error);
        res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t s√¢n!", error });
    }
};


const deleteCourt = async (req, res) => {
    try {
        const { id } = req.params;
        const court = await Court.findByPk(id);

        if (!court) {
            return res.status(404).json({ message: "S√¢n kh√¥ng t·ªìn t·∫°i!" });
        }

        await court.destroy();
        res.status(200).json({ message: "X√≥a s√¢n th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói x√≥a s√¢n!", error });
    }
};

module.exports = {
    getAllCourts,
    getCourtById,
    createCourt,
    updateCourt,
    deleteCourt
};
